#!/bin/bash
#
# Perfect Webserver - Security Installer
# Copyright: Daniel Hiller
# License: AGPL-3 or later
#
# Functions for installing and configuring security tools:
# - Fail2ban (intrusion prevention)
# - Unattended-Upgrades (automatic security updates)
# - System resource monitoring (MOTD)
#

# ============================================================================
# FAIL2BAN INSTALLATION
# ============================================================================

# install_fail2ban: Install and configure Fail2ban
install_fail2ban() {
    if [[ "${INSTALL_FAIL2BAN}" != "yes" ]]; then
        log "Fail2ban installation skipped (user choice)"
        return 0
    fi

    log "Installing Fail2ban..."

    # Check if already installed
    if command -v fail2ban-client &> /dev/null; then
        log "Fail2ban is already installed"
        if systemctl is-active --quiet fail2ban; then
            log "Fail2ban is running"
            return 0
        fi
    fi

    # Install Fail2ban
    install_package "fail2ban"

    # Create jail.local configuration
    log "Configuring Fail2ban..."

    cat > /etc/fail2ban/jail.local << 'EOF'
# Fail2ban local configuration
# Auto-generated by Perfect Webserver Installer

[DEFAULT]
# Ban hosts for 10 minutes (600 seconds)
bantime = 600

# A host is banned if it has generated "maxretry" during "findtime" seconds
findtime = 600

# Number of failures before a host gets banned
maxretry = 5

# Destination email for notifications (optional)
# destemail = root@localhost
# action = %(action_mwl)s

[sshd]
enabled = true
port = ssh
logpath = /var/log/auth.log
maxretry = 3
bantime = 3600

[nginx-http-auth]
enabled = true
port = http,https
logpath = /var/log/nginx/error.log

[nginx-noscript]
enabled = true
port = http,https
logpath = /var/log/nginx/access.log

[nginx-badbots]
enabled = true
port = http,https
logpath = /var/log/nginx/access.log

[nginx-noproxy]
enabled = true
port = http,https
logpath = /var/log/nginx/access.log

[nginx-limit-req]
enabled = true
port = http,https
logpath = /var/log/nginx/error.log
EOF

    # Enable and start Fail2ban
    enable_service "fail2ban"

    # Verify status
    if systemctl is-active --quiet fail2ban; then
        log "Fail2ban installed and running successfully"
    else
        log "Warning: Fail2ban installed but not running"
    fi
}

# ============================================================================
# UNATTENDED UPGRADES INSTALLATION
# ============================================================================

# install_unattended_upgrades: Install and configure automatic security updates
install_unattended_upgrades() {
    if [[ "${INSTALL_UNATTENDED_UPGRADES}" != "yes" ]]; then
        log "Unattended-Upgrades installation skipped (user choice)"
        return 0
    fi

    log "Installing Unattended-Upgrades..."

    # Check if already installed
    if dpkg -l | grep -q "^ii  unattended-upgrades"; then
        log "Unattended-Upgrades is already installed"
        return 0
    fi

    # Install package
    install_package "unattended-upgrades"
    install_package "apt-listchanges"

    # Configure unattended-upgrades
    log "Configuring Unattended-Upgrades..."

    # Enable automatic updates for security packages only
    cat > /etc/apt/apt.conf.d/50unattended-upgrades << 'EOF'
// Unattended-Upgrade::Origins-Pattern controls which packages are
// upgraded automatically. Lines below have the format:
// "keyword=value,...;" Multiple keywords are supported.

Unattended-Upgrade::Origins-Pattern {
    // Security updates only
    "origin=Debian,codename=${distro_codename},label=Debian-Security";
    "origin=Ubuntu,archive=${distro_codename}-security,label=Ubuntu";
};

// List of packages to not update automatically
Unattended-Upgrade::Package-Blacklist {
    // "vim";
    // "libc6";
};

// Automatically reboot if needed (disabled by default)
Unattended-Upgrade::Automatic-Reboot "false";

// If automatic reboot is enabled, do it at a specific time
// Unattended-Upgrade::Automatic-Reboot-Time "02:00";

// Remove unused dependencies after upgrade
Unattended-Upgrade::Remove-Unused-Dependencies "true";

// Remove unused kernel packages after upgrade
Unattended-Upgrade::Remove-Unused-Kernel-Packages "true";

// Email notification (optional)
// Unattended-Upgrade::Mail "root@localhost";
// Unattended-Upgrade::MailOnlyOnError "true";

// Verbose logging
Unattended-Upgrade::Verbose "false";
EOF

    # Enable periodic updates
    cat > /etc/apt/apt.conf.d/20auto-upgrades << 'EOF'
// Enable automatic package list updates
APT::Periodic::Update-Package-Lists "1";

// Enable automatic download of upgradeable packages
APT::Periodic::Download-Upgradeable-Packages "1";

// Enable automatic installation of security upgrades
APT::Periodic::Unattended-Upgrade "1";

// Enable automatic cleanup of downloaded packages
APT::Periodic::AutocleanInterval "7";
EOF

    # Test configuration
    log "Testing Unattended-Upgrades configuration..."
    if unattended-upgrade --dry-run --debug 2>&1 | grep -q "Initial blacklisted packages"; then
        log "Unattended-Upgrades configured successfully"
    else
        log "Warning: Unattended-Upgrades configuration test returned warnings"
    fi

    log "Unattended-Upgrades installation completed"
}

# ============================================================================
# SYSTEM RESOURCE MONITORING (MOTD)
# ============================================================================

# install_resource_monitoring: Install system resource monitoring for SSH login
install_resource_monitoring() {
    log "Installing system resource monitoring (MOTD)..."

    # Create custom MOTD directory
    mkdir -p /etc/update-motd.d
    chmod 755 /etc/update-motd.d

    # Disable default Ubuntu/Debian MOTD scripts that we don't want
    if [[ -f /etc/update-motd.d/10-help-text ]]; then
        chmod -x /etc/update-motd.d/10-help-text 2>/dev/null || true
    fi
    if [[ -f /etc/update-motd.d/50-motd-news ]]; then
        chmod -x /etc/update-motd.d/50-motd-news 2>/dev/null || true
    fi

    # Create custom system info script
    cat > /etc/update-motd.d/05-system-info << 'EOF'
#!/bin/bash
#
# System Information MOTD
# Shows system resources and webserver status
#

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Get system information
HOSTNAME=$(hostname)
UPTIME=$(uptime -p | sed 's/up //')
LOAD=$(cat /proc/loadavg | awk '{print $1", "$2", "$3}')

# CPU usage
CPU_USAGE=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)

# Memory usage
MEMORY_TOTAL=$(free -h | grep Mem | awk '{print $2}')
MEMORY_USED=$(free -h | grep Mem | awk '{print $3}')
MEMORY_PERCENT=$(free | grep Mem | awk '{printf "%.1f", ($3/$2) * 100}')

# Disk usage
DISK_USAGE=$(df -h / | awk 'NR==2 {print $5}' | sed 's/%//')
DISK_USED=$(df -h / | awk 'NR==2 {print $3}')
DISK_TOTAL=$(df -h / | awk 'NR==2 {print $2}')

# Webserver status
if systemctl is-active --quiet nginx; then
    NGINX_STATUS="${GREEN}running${NC}"
else
    NGINX_STATUS="${RED}stopped${NC}"
fi

if systemctl is-active --quiet php*-fpm; then
    PHP_FPM_STATUS="${GREEN}running${NC}"
else
    PHP_FPM_STATUS="${RED}stopped${NC}"
fi

if systemctl is-active --quiet mariadb; then
    MARIADB_STATUS="${GREEN}running${NC}"
else
    MARIADB_STATUS="${YELLOW}not installed${NC}"
fi

# Determine color for resource usage
if (( $(echo "$MEMORY_PERCENT > 90" | bc -l) )); then
    MEM_COLOR=$RED
elif (( $(echo "$MEMORY_PERCENT > 70" | bc -l) )); then
    MEM_COLOR=$YELLOW
else
    MEM_COLOR=$GREEN
fi

if (( DISK_USAGE > 90 )); then
    DISK_COLOR=$RED
elif (( DISK_USAGE > 70 )); then
    DISK_COLOR=$YELLOW
else
    DISK_COLOR=$GREEN
fi

if (( $(echo "$CPU_USAGE > 90" | bc -l) )); then
    CPU_COLOR=$RED
elif (( $(echo "$CPU_USAGE > 70" | bc -l) )); then
    CPU_COLOR=$YELLOW
else
    CPU_COLOR=$GREEN
fi

# Display information
echo -e ""
echo -e "${CYAN}╔══════════════════════════════════════════════════════════════╗${NC}"
echo -e "${CYAN}║${NC}  ${BLUE}Perfect Webserver${NC} - System Information                   ${CYAN}║${NC}"
echo -e "${CYAN}╚══════════════════════════════════════════════════════════════╝${NC}"
echo -e ""
echo -e "  ${CYAN}Hostname:${NC}    $HOSTNAME"
echo -e "  ${CYAN}Uptime:${NC}      $UPTIME"
echo -e "  ${CYAN}Load Avg:${NC}    $LOAD"
echo -e ""
echo -e "${CYAN}┌─ System Resources ────────────────────────────────────────────┐${NC}"
echo -e "  ${CYAN}CPU Usage:${NC}   ${CPU_COLOR}${CPU_USAGE}%${NC}"
echo -e "  ${CYAN}Memory:${NC}      ${MEM_COLOR}${MEMORY_USED}${NC} / ${MEMORY_TOTAL} (${MEM_COLOR}${MEMORY_PERCENT}%${NC})"
echo -e "  ${CYAN}Disk /:${NC}      ${DISK_COLOR}${DISK_USED}${NC} / ${DISK_TOTAL} (${DISK_COLOR}${DISK_USAGE}%${NC})"
echo -e "${CYAN}└────────────────────────────────────────────────────────────────┘${NC}"
echo -e ""
echo -e "${CYAN}┌─ Webserver Services ───────────────────────────────────────────┐${NC}"
echo -e "  ${CYAN}Nginx:${NC}       $NGINX_STATUS"
echo -e "  ${CYAN}PHP-FPM:${NC}     $PHP_FPM_STATUS"
echo -e "  ${CYAN}MariaDB:${NC}     $MARIADB_STATUS"
echo -e "${CYAN}└────────────────────────────────────────────────────────────────┘${NC}"
echo -e ""

# Show warnings if resources are critical
if (( $(echo "$MEMORY_PERCENT > 90" | bc -l) )); then
    echo -e "${RED}⚠ WARNING: Memory usage is critically high (${MEMORY_PERCENT}%)${NC}"
fi

if (( DISK_USAGE > 90 )); then
    echo -e "${RED}⚠ WARNING: Disk usage is critically high (${DISK_USAGE}%)${NC}"
fi

if (( $(echo "$CPU_USAGE > 90" | bc -l) )); then
    echo -e "${RED}⚠ WARNING: CPU usage is critically high (${CPU_USAGE}%)${NC}"
fi

# Show security reminders
if [[ ! -f /root/.webserver-security-check ]]; then
    echo -e "${YELLOW}💡 TIP: Run 'webserver-manager system security' to check security status${NC}"
    echo -e ""
fi
EOF

    chmod +x /etc/update-motd.d/05-system-info

    # Disable standard MOTD (we have our custom one)
    touch /etc/motd
    chmod 644 /etc/motd
    > /etc/motd

    log "System resource monitoring installed successfully"
}

# ============================================================================
# END OF SECURITY INSTALLER
# ============================================================================
