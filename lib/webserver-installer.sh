#!/bin/bash
#
# Webhosting Installer - Webserver Installation Functions
# Copyright: Daniel Hiller
# License: AGPL-3 or later
#
# Nginx installation with PHP-FPM integration
#

# ============================================================================
# NGINX INSTALLATION
# ============================================================================

# install_nginx: Install and configure Nginx webserver
install_nginx() {
    log "Installing Nginx webserver..."

    # Check if already installed
    if command -v nginx &> /dev/null && systemctl is-active --quiet nginx; then
        log "Nginx is already installed and running"
        log "Skipping Nginx installation..."
        return 0
    fi

    # Install Nginx
    install_package "nginx"

    # Create directories
    mkdir -p /var/www/html
    mkdir -p /etc/nginx/sites-available
    mkdir -p /etc/nginx/sites-enabled
    mkdir -p /etc/nginx/snippets

    # Backup original configuration
    backup_file "/etc/nginx/nginx.conf"

    # Configure Nginx main config
    configure_nginx_main

    # Create PHP-FPM upstream configurations
    create_nginx_php_upstreams

    # Create default virtual host
    create_nginx_default_vhost

    # Create security snippets
    create_nginx_security_snippets

    # Install custom error pages
    install_error_pages

    # Test configuration
    nginx -t || error_exit "Nginx configuration test failed"

    # Enable and start Nginx
    enable_service "nginx"

    # Create default index page
    create_default_index_page

    log "Nginx installation completed successfully"
}

# configure_nginx_main: Configure main nginx.conf
configure_nginx_main() {
    log "Configuring Nginx main configuration..."

    local nginx_conf="/etc/nginx/nginx.conf"

    cat > "${nginx_conf}" << 'EOF'
user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    ##
    # Basic Settings
    ##
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;
    client_max_body_size 64M;

    # server_names_hash_bucket_size 64;
    # server_name_in_redirect off;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    ##
    # SSL Settings
    ##
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';

    ##
    # Logging Settings
    ##
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    ##
    # Gzip Settings
    ##
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/rss+xml font/truetype font/opentype application/vnd.ms-fontobject image/svg+xml;
    gzip_disable "msie6";

    ##
    # Virtual Host Configs
    ##
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}
EOF

    log "Nginx main configuration created"
}

# create_nginx_php_upstreams: Create upstream configurations for all PHP versions
create_nginx_php_upstreams() {
    log "Creating Nginx PHP-FPM upstream configurations..."

    local upstream_file="/etc/nginx/conf.d/php-fpm-upstreams.conf"

    cat > "${upstream_file}" << 'EOF'
# PHP-FPM Upstream Configurations
# Auto-generated by Webhosting Installer

EOF

    # Create upstream for each installed PHP version
    for version in "${PHP_VERSIONS[@]}"; do
        local socket_path
        socket_path=$(get_php_fpm_socket "${version}")
        local upstream_name="php${version//.}"

        cat >> "${upstream_file}" << EOF
upstream ${upstream_name} {
    server unix:${socket_path};
}

EOF
        log "Created upstream: ${upstream_name} -> ${socket_path}"
    done

    log "PHP-FPM upstreams configured"
}

# create_nginx_default_vhost: Create default virtual host
create_nginx_default_vhost() {
    log "Creating Nginx default virtual host..."

    local vhost_file="/etc/nginx/sites-available/default"

    # Determine default PHP version (latest selected)
    local default_php="${PHP_VERSIONS[-1]}"
    local default_upstream="php${default_php//.}"

    cat > "${vhost_file}" << EOF
server {
    listen 80 default_server;
    listen [::]:80 default_server;

    root /var/www/html;
    index index.php index.html index.htm;

    server_name _;

    # Custom error pages
    error_page 403 /errors/403.html;
    error_page 404 /errors/404.html;
    error_page 500 502 503 504 /errors/50x.html;

    # Security headers
    include snippets/security-headers.conf;

    # Logging
    access_log /var/log/nginx/default-access.log;
    error_log /var/log/nginx/default-error.log;

    # Main location
    location / {
        try_files \$uri \$uri/ =404;
    }

    # Error pages location
    location ^~ /errors/ {
        internal;
        root /var/www;
    }

    # PHP processing
    location ~ \.php\$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass ${default_upstream};
    }

    # Deny access to hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Deny access to backup files
    location ~ ~\$ {
        deny all;
        access_log off;
        log_not_found off;
    }
}
EOF

    # Enable site
    ln -sf "${vhost_file}" /etc/nginx/sites-enabled/default

    log "Nginx default virtual host created (default PHP: ${default_php})"
}

# create_nginx_security_snippets: Create security header snippets
create_nginx_security_snippets() {
    log "Creating Nginx security snippets..."

    # Security headers
    cat > /etc/nginx/snippets/security-headers.conf << 'EOF'
# Security Headers
add_header X-Frame-Options "SAMEORIGIN" always;
add_header X-Content-Type-Options "nosniff" always;
add_header X-XSS-Protection "1; mode=block" always;
add_header Referrer-Policy "no-referrer-when-downgrade" always;
EOF

    # FastCGI PHP parameters (if not exists)
    if [[ ! -f /etc/nginx/snippets/fastcgi-php.conf ]]; then
        cat > /etc/nginx/snippets/fastcgi-php.conf << 'EOF'
# FastCGI params for PHP
fastcgi_split_path_info ^(.+\.php)(/.+)$;
try_files $fastcgi_script_name =404;
set $path_info $fastcgi_path_info;
fastcgi_param PATH_INFO $path_info;
fastcgi_index index.php;
include fastcgi.conf;
EOF
    fi

    log "Security snippets created"
}

# ============================================================================
# ERROR PAGES
# ============================================================================

# install_error_pages: Install custom error pages
install_error_pages() {
    log "Installing custom error pages..."

    local error_dir="/var/www/errors"
    local template_dir="${SCRIPT_DIR}/../config/templates"

    # Create error pages directory
    mkdir -p "${error_dir}"

    # Copy error page templates
    local error_files=("403" "404" "500" "502" "503")
    
    for error_code in "${error_files[@]}"; do
        local template_file="${template_dir}/error-${error_code}.html"
        local dest_file="${error_dir}/${error_code}.html"
        
        if [[ -f "${template_file}" ]]; then
            cp "${template_file}" "${dest_file}"
            log "Installed error page: ${error_code}.html"
        else
            log "Warning: Template not found: ${template_file}"
        fi
    done

    # Create generic 50x.html that redirects to 500.html
    if [[ -f "${error_dir}/500.html" ]]; then
        cp "${error_dir}/500.html" "${error_dir}/50x.html"
        log "Created generic 50x.html error page"
    fi

    # Set permissions
    chown -R www-data:www-data "${error_dir}"
    chmod 755 "${error_dir}"
    chmod 644 "${error_dir}"/*.html

    log "Custom error pages installed in ${error_dir}"
}

# ============================================================================
# FIREWALL CONFIGURATION
# ============================================================================

# configure_firewall: Configure UFW firewall for webserver
configure_firewall() {
    log "Configuring firewall..."

    # Install UFW if not present
    if ! command -v ufw &> /dev/null; then
        install_package "ufw"
    fi

    # Allow SSH first (to avoid lockout)
    log "Allowing SSH through firewall..."
    ufw allow 22/tcp || log "Warning: Failed to add SSH rule"

    # Allow HTTP
    log "Allowing HTTP through firewall..."
    ufw allow 80/tcp || log "Warning: Failed to add HTTP rule"

    # Allow HTTPS
    log "Allowing HTTPS through firewall..."
    ufw allow 443/tcp || log "Warning: Failed to add HTTPS rule"

    # Enable firewall if not already enabled
    if ! ufw status | grep -q "Status: active"; then
        log "Enabling firewall..."
        echo "y" | ufw enable || log "Warning: Failed to enable firewall"
    else
        log "Firewall already enabled"
    fi

    # Show status
    ufw status | tee -a "${LOG_FILE}"

    log "Firewall configuration completed"
}

# ============================================================================
# WEBSERVER TESTING
# ============================================================================

# test_webserver_config: Test Nginx configuration
test_webserver_config() {
    log "Testing Nginx configuration..."

    nginx -t || error_exit "Nginx configuration test failed"
    log "Nginx configuration test passed"

    # Reload to apply any changes
    reload_service "nginx"

    log "Webserver configuration test completed"
}

# ============================================================================
# DEFAULT WEB CONTENT
# ============================================================================

# get_installation_info: Gather information about installed components
get_installation_info() {
    local info_type="$1"
    
    case "${info_type}" in
        "components")
            local components=""
            
            # Webserver (Nginx only)
            components+='<div class="bg-white rounded-xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 border-l-4 border-purple-600 hover:scale-105"><div class="flex items-center gap-3 mb-2"><span class="text-3xl">🚀</span><span class="text-lg font-bold text-gray-800">Nginx</span></div><div class="text-gray-600 text-sm">High-performance web server</div></div>'
            
            # PHP
            if [[ ${#PHP_VERSIONS[@]} -gt 0 ]]; then
                components+='<div class="bg-white rounded-xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 border-l-4 border-indigo-600 hover:scale-105"><div class="flex items-center gap-3 mb-2"><span class="text-3xl">🐘</span><span class="text-lg font-bold text-gray-800">PHP-FPM</span></div><div class="text-gray-600 text-sm">FastCGI Process Manager</div></div>'
            fi
            
            # Database
            if command -v mariadb &> /dev/null || command -v mysql &> /dev/null; then
                components+='<div class="bg-white rounded-xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 border-l-4 border-blue-600 hover:scale-105"><div class="flex items-center gap-3 mb-2"><span class="text-3xl">🗄️</span><span class="text-lg font-bold text-gray-800">MariaDB</span></div><div class="text-gray-600 text-sm">Database server</div></div>'
            fi
            
            # Certbot
            if command -v certbot &> /dev/null; then
                components+='<div class="bg-white rounded-xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 border-l-4 border-green-600 hover:scale-105"><div class="flex items-center gap-3 mb-2"><span class="text-3xl">🔒</span><span class="text-lg font-bold text-gray-800">Certbot</span></div><div class="text-gray-600 text-sm">SSL certificate management</div></div>'
            fi
            
            # UFW
            if command -v ufw &> /dev/null; then
                components+='<div class="bg-white rounded-xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 border-l-4 border-red-600 hover:scale-105"><div class="flex items-center gap-3 mb-2"><span class="text-3xl">🔥</span><span class="text-lg font-bold text-gray-800">UFW Firewall</span></div><div class="text-gray-600 text-sm">Security configured</div></div>'
            fi
            
            echo "${components}"
            ;;
            
        "php_versions")
            local versions=""
            for version in "${PHP_VERSIONS[@]}"; do
                versions+="<span class=\"inline-block bg-gradient-to-r from-purple-600 to-indigo-600 text-white px-5 py-2 rounded-full text-sm font-bold shadow-lg hover:shadow-xl transition-shadow duration-200\">PHP ${version}</span>"
            done
            echo "${versions}"
            ;;
            
        "default_php")
            if [[ ${#PHP_VERSIONS[@]} -gt 0 ]]; then
                echo "${PHP_VERSIONS[-1]}"
            else
                echo "N/A"
            fi
            ;;
            
        "mariadb_info")
            if command -v mariadb &> /dev/null || command -v mysql &> /dev/null; then
                local pw_file="/root/.webhosting-credentials"
                echo '<div class="mb-10"><h2 class="text-3xl font-bold text-gray-800 mb-6 flex items-center"><svg class="w-8 h-8 mr-3 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path></svg>Database Credentials</h2><div class="bg-gradient-to-r from-red-50 to-pink-50 border-l-4 border-red-500 rounded-xl p-6"><div class="flex items-start"><svg class="w-6 h-6 text-red-500 mr-3 flex-shrink-0 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z"></path></svg><div><h3 class="text-lg font-bold text-red-800 mb-3">Important: Database Passwords</h3><p class="text-gray-700 mb-4">Your MariaDB root password and other database credentials have been saved to:</p><div class="bg-gray-800 text-green-400 px-4 py-3 rounded-lg font-mono text-sm mb-4">/root/.webhosting-credentials</div><div class="bg-white border border-red-200 rounded-lg p-4 mb-4"><p class="text-sm text-gray-700"><strong class="text-red-700">⚠️ Security:</strong> This file contains sensitive information and is only readable by root. Please store these credentials in a secure password manager and consider removing this file after noting the passwords.</p></div><p class="text-gray-700"><strong>Access MariaDB:</strong> <code class="bg-gray-800 text-green-400 px-2 py-1 rounded text-sm">mariadb -u root -p</code></p></div></div></div></div>'
            else
                echo ""
            fi
            ;;
            
        "webserver_config")
            echo "/etc/nginx/nginx.conf"
            ;;
            
        "database_config")
            if command -v mariadb &> /dev/null || command -v mysql &> /dev/null; then
                echo '<div class="mt-4"><p class="font-semibold text-gray-700 mb-2">Database Config:</p><div class="bg-gray-800 text-green-400 px-4 py-3 rounded-lg font-mono text-sm">/etc/mysql/mariadb.conf.d/</div></div>'
            else
                echo ""
            fi
            ;;
            
        "component_count")
            local count=1  # Nginx is always installed
            [[ ${#PHP_VERSIONS[@]} -gt 0 ]] && ((count++))
            { command -v mariadb &> /dev/null || command -v mysql &> /dev/null; } && ((count++))
            command -v certbot &> /dev/null && ((count++))
            command -v ufw &> /dev/null && ((count++))
            echo "${count}"
            ;;
            
        "php_count")
            echo "${#PHP_VERSIONS[@]}"
            ;;
            
        "webserver_name")
            echo "Nginx"
            ;;
    esac
}

# create_default_index_page: Create default index.html from template
create_default_index_page() {
    log "Creating default web pages..."

    local webroot="/var/www/html"
    local template_file="${CONFIG_DIR}/templates/default-index.html.template"
    
    # Check if template exists
    if [[ ! -f "${template_file}" ]]; then
        log "Warning: Template file not found: ${template_file}"
        log "Creating basic index.html instead..."
        echo "<h1>Web Server Installed</h1><p>Template file missing.</p>" > "${webroot}/index.html"
    else
        # Read template
        local template_content
        template_content=$(cat "${template_file}")
        
        # Gather installation information
        local installed_components
        installed_components=$(get_installation_info "components")
        
        local php_versions
        php_versions=$(get_installation_info "php_versions")
        
        local default_php
        default_php=$(get_installation_info "default_php")
        
        local mariadb_info
        mariadb_info=$(get_installation_info "mariadb_info")
        
        local webserver_config
        webserver_config=$(get_installation_info "webserver_config")
        
        local database_config
        database_config=$(get_installation_info "database_config")
        
        local component_count
        component_count=$(get_installation_info "component_count")
        
        local php_count
        php_count=$(get_installation_info "php_count")
        
        local webserver_name
        webserver_name=$(get_installation_info "webserver_name")
        
        # Substitute placeholders
        template_content="${template_content//\{\{INSTALLED_COMPONENTS\}\}/${installed_components}}"
        template_content="${template_content//\{\{PHP_VERSIONS\}\}/${php_versions}}"
        template_content="${template_content//\{\{DEFAULT_PHP_VERSION\}\}/${default_php}}"
        template_content="${template_content//\{\{MARIADB_INFO\}\}/${mariadb_info}}"
        template_content="${template_content//\{\{WEBSERVER_CONFIG\}\}/${webserver_config}}"
        template_content="${template_content//\{\{DATABASE_CONFIG\}\}/${database_config}}"
        template_content="${template_content//\{\{COMPONENT_COUNT\}\}/${component_count}}"
        template_content="${template_content//\{\{PHP_COUNT\}\}/${php_count}}"
        template_content="${template_content//\{\{WEBSERVER_NAME\}\}/${webserver_name}}"
        
        # Write final HTML
        echo "${template_content}" > "${webroot}/index.html"
    fi

    # Create info.php for PHP testing
    cat > "${webroot}/info.php" << 'EOF'
<?php
/**
 * PHP Information Page
 * Auto-generated by Perfect Webserver Installer
 */

// Security: Remove this file in production!
if ($_SERVER['REMOTE_ADDR'] !== '127.0.0.1' &&
    $_SERVER['REMOTE_ADDR'] !== '::1') {
    // Only allow from localhost in production
    // Uncomment to enable remote access (not recommended):
    // header('HTTP/1.0 403 Forbidden');
    // exit('Access denied. Only localhost access allowed.');
}

phpinfo();
EOF

    # Set permissions
    chown -R www-data:www-data "${webroot}"
    chmod 755 "${webroot}"
    chmod 644 "${webroot}/index.html"
    chmod 644 "${webroot}/info.php"

    log "Default web pages created in ${webroot}"
}

# ============================================================================
# UTILITY FUNCTIONS
# ============================================================================

# get_webserver_status: Get Nginx status
get_webserver_status() {
    systemctl status nginx --no-pager
}

# reload_webserver: Reload Nginx configuration
reload_webserver() {
    reload_service "nginx"
}

# ============================================================================
# END OF WEBSERVER INSTALLER
# ============================================================================

log "Webserver installer library loaded successfully"
