#!/bin/bash
#
# Webhosting Installer - Webserver Installation Functions
# Copyright: Daniel Hiller
# License: AGPL-3 or later
#
# Nginx and Apache installation with PHP-FPM integration
#

# ============================================================================
# NGINX INSTALLATION
# ============================================================================

# install_nginx: Install and configure Nginx webserver
install_nginx() {
    log "Installing Nginx webserver..."

    # Install Nginx
    install_package "nginx"

    # Create directories
    mkdir -p /var/www/html
    mkdir -p /etc/nginx/sites-available
    mkdir -p /etc/nginx/sites-enabled
    mkdir -p /etc/nginx/snippets

    # Backup original configuration
    backup_file "/etc/nginx/nginx.conf"

    # Configure Nginx main config
    configure_nginx_main

    # Create PHP-FPM upstream configurations
    create_nginx_php_upstreams

    # Create default virtual host
    create_nginx_default_vhost

    # Create security snippets
    create_nginx_security_snippets

    # Test configuration
    nginx -t || error_exit "Nginx configuration test failed"

    # Enable and start Nginx
    enable_service "nginx"

    # Create default index page
    create_default_index_page

    log "Nginx installation completed successfully"
}

# configure_nginx_main: Configure main nginx.conf
configure_nginx_main() {
    log "Configuring Nginx main configuration..."

    local nginx_conf="/etc/nginx/nginx.conf"

    cat > "${nginx_conf}" << 'EOF'
user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    ##
    # Basic Settings
    ##
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;
    client_max_body_size 64M;

    # server_names_hash_bucket_size 64;
    # server_name_in_redirect off;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    ##
    # SSL Settings
    ##
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';

    ##
    # Logging Settings
    ##
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    ##
    # Gzip Settings
    ##
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/rss+xml font/truetype font/opentype application/vnd.ms-fontobject image/svg+xml;
    gzip_disable "msie6";

    ##
    # Virtual Host Configs
    ##
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}
EOF

    log "Nginx main configuration created"
}

# create_nginx_php_upstreams: Create upstream configurations for all PHP versions
create_nginx_php_upstreams() {
    log "Creating Nginx PHP-FPM upstream configurations..."

    local upstream_file="/etc/nginx/conf.d/php-fpm-upstreams.conf"

    cat > "${upstream_file}" << 'EOF'
# PHP-FPM Upstream Configurations
# Auto-generated by Webhosting Installer

EOF

    # Create upstream for each installed PHP version
    for version in "${PHP_VERSIONS[@]}"; do
        local socket_path
        socket_path=$(get_php_fpm_socket "${version}")
        local upstream_name="php${version//.}"

        cat >> "${upstream_file}" << EOF
upstream ${upstream_name} {
    server unix:${socket_path};
}

EOF
        log "Created upstream: ${upstream_name} -> ${socket_path}"
    done

    log "PHP-FPM upstreams configured"
}

# create_nginx_default_vhost: Create default virtual host
create_nginx_default_vhost() {
    log "Creating Nginx default virtual host..."

    local vhost_file="/etc/nginx/sites-available/default"

    # Determine default PHP version (latest selected)
    local default_php="${PHP_VERSIONS[-1]}"
    local default_upstream="php${default_php//.}"

    cat > "${vhost_file}" << EOF
server {
    listen 80 default_server;
    listen [::]:80 default_server;

    root /var/www/html;
    index index.php index.html index.htm;

    server_name _;

    # Security headers
    include snippets/security-headers.conf;

    # Logging
    access_log /var/log/nginx/default-access.log;
    error_log /var/log/nginx/default-error.log;

    # Main location
    location / {
        try_files \$uri \$uri/ =404;
    }

    # PHP processing
    location ~ \.php\$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass ${default_upstream};
    }

    # Deny access to hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Deny access to backup files
    location ~ ~\$ {
        deny all;
        access_log off;
        log_not_found off;
    }
}
EOF

    # Enable site
    ln -sf "${vhost_file}" /etc/nginx/sites-enabled/default

    log "Nginx default virtual host created (default PHP: ${default_php})"
}

# create_nginx_security_snippets: Create security header snippets
create_nginx_security_snippets() {
    log "Creating Nginx security snippets..."

    # Security headers
    cat > /etc/nginx/snippets/security-headers.conf << 'EOF'
# Security Headers
add_header X-Frame-Options "SAMEORIGIN" always;
add_header X-Content-Type-Options "nosniff" always;
add_header X-XSS-Protection "1; mode=block" always;
add_header Referrer-Policy "no-referrer-when-downgrade" always;
EOF

    # FastCGI PHP parameters (if not exists)
    if [[ ! -f /etc/nginx/snippets/fastcgi-php.conf ]]; then
        cat > /etc/nginx/snippets/fastcgi-php.conf << 'EOF'
# FastCGI params for PHP
fastcgi_split_path_info ^(.+\.php)(/.+)$;
try_files $fastcgi_script_name =404;
set $path_info $fastcgi_path_info;
fastcgi_param PATH_INFO $path_info;
fastcgi_index index.php;
include fastcgi.conf;
EOF
    fi

    log "Security snippets created"
}

# ============================================================================
# APACHE INSTALLATION
# ============================================================================

# install_apache: Install and configure Apache webserver
install_apache() {
    log "Installing Apache webserver..."

    # Install Apache
    install_package "apache2"

    # Create directories
    mkdir -p /var/www/html

    # Backup original configuration
    backup_file "/etc/apache2/apache2.conf"

    # Configure Apache main config
    configure_apache_main

    # Enable required modules
    enable_apache_modules

    # Create PHP-FPM proxy configurations
    create_apache_php_configs

    # Create default virtual host
    create_apache_default_vhost

    # Disable default SSL site (if present)
    [[ -f /etc/apache2/sites-enabled/default-ssl.conf ]] && a2dissite default-ssl

    # Test configuration
    apache2ctl configtest || error_exit "Apache configuration test failed"

    # Enable and start Apache
    enable_service "apache2"

    # Create default index page
    create_default_index_page

    log "Apache installation completed successfully"
}

# configure_apache_main: Configure main Apache settings
configure_apache_main() {
    log "Configuring Apache main configuration..."

    local apache_conf="/etc/apache2/apache2.conf"

    # Set ServerTokens and ServerSignature
    if ! grep -q "^ServerTokens" /etc/apache2/conf-available/security.conf; then
        echo "ServerTokens Prod" >> /etc/apache2/conf-available/security.conf
    else
        sed -i 's/^ServerTokens .*/ServerTokens Prod/' /etc/apache2/conf-available/security.conf
    fi

    if ! grep -q "^ServerSignature" /etc/apache2/conf-available/security.conf; then
        echo "ServerSignature Off" >> /etc/apache2/conf-available/security.conf
    else
        sed -i 's/^ServerSignature .*/ServerSignature Off/' /etc/apache2/conf-available/security.conf
    fi

    # Enable security conf
    a2enconf security

    log "Apache main configuration updated"
}

# enable_apache_modules: Enable required Apache modules
enable_apache_modules() {
    log "Enabling Apache modules..."

    local modules=(
        "rewrite"
        "ssl"
        "headers"
        "proxy"
        "proxy_fcgi"
        "setenvif"
    )

    for module in "${modules[@]}"; do
        log "Enabling module: ${module}"
        a2enmod "${module}" || log "Warning: Failed to enable module ${module}"
    done

    log "Apache modules enabled"
}

# create_apache_php_configs: Create PHP-FPM proxy configurations
create_apache_php_configs() {
    log "Creating Apache PHP-FPM configurations..."

    local config_dir="/etc/apache2/conf-available"

    # Create config for each PHP version
    for version in "${PHP_VERSIONS[@]}"; do
        local socket_path
        socket_path=$(get_php_fpm_socket "${version}")
        local config_file="${config_dir}/php${version}-fpm.conf"

        cat > "${config_file}" << EOF
# PHP ${version} FPM Configuration
<FilesMatch \.php\$>
    SetHandler "proxy:unix:${socket_path}|fcgi://localhost"
</FilesMatch>
EOF

        log "Created PHP ${version} config: ${config_file}"
    done

    # Enable default PHP version config
    local default_php="${PHP_VERSIONS[-1]}"
    a2enconf "php${default_php}-fpm"

    log "Apache PHP-FPM configurations created (default: ${default_php})"
}

# create_apache_default_vhost: Create default virtual host
create_apache_default_vhost() {
    log "Creating Apache default virtual host..."

    local vhost_file="/etc/apache2/sites-available/000-default.conf"

    cat > "${vhost_file}" << 'EOF'
<VirtualHost *:80>
    ServerAdmin webmaster@localhost
    DocumentRoot /var/www/html

    <Directory /var/www/html>
        Options -Indexes +FollowSymLinks
        AllowOverride All
        Require all granted
    </Directory>

    # Security headers
    Header always set X-Frame-Options "SAMEORIGIN"
    Header always set X-Content-Type-Options "nosniff"
    Header always set X-XSS-Protection "1; mode=block"

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>
EOF

    # Enable site
    a2ensite 000-default

    log "Apache default virtual host created"
}

# ============================================================================
# FIREWALL CONFIGURATION
# ============================================================================

# configure_firewall: Configure UFW firewall for webserver
configure_firewall() {
    log "Configuring firewall..."

    # Install UFW if not present
    if ! command -v ufw &> /dev/null; then
        install_package "ufw"
    fi

    # Allow SSH first (to avoid lockout)
    log "Allowing SSH through firewall..."
    ufw allow 22/tcp || log "Warning: Failed to add SSH rule"

    # Allow HTTP
    log "Allowing HTTP through firewall..."
    ufw allow 80/tcp || log "Warning: Failed to add HTTP rule"

    # Allow HTTPS
    log "Allowing HTTPS through firewall..."
    ufw allow 443/tcp || log "Warning: Failed to add HTTPS rule"

    # Enable firewall if not already enabled
    if ! ufw status | grep -q "Status: active"; then
        log "Enabling firewall..."
        echo "y" | ufw enable || log "Warning: Failed to enable firewall"
    else
        log "Firewall already enabled"
    fi

    # Show status
    ufw status | tee -a "${LOG_FILE}"

    log "Firewall configuration completed"
}

# ============================================================================
# WEBSERVER TESTING
# ============================================================================

# test_webserver_config: Test webserver configuration
test_webserver_config() {
    log "Testing webserver configuration..."

    if [[ "${WEBSERVER}" == "nginx" ]]; then
        log "Testing Nginx configuration..."
        nginx -t || error_exit "Nginx configuration test failed"
        log "Nginx configuration test passed"

        # Reload to apply any changes
        reload_service "nginx"

    elif [[ "${WEBSERVER}" == "apache" ]]; then
        log "Testing Apache configuration..."
        apache2ctl configtest || error_exit "Apache configuration test failed"
        log "Apache configuration test passed"

        # Reload to apply any changes
        reload_service "apache2"
    fi

    log "Webserver configuration test completed"
}

# ============================================================================
# DEFAULT WEB CONTENT
# ============================================================================

# create_default_index_page: Create default index.php and index.html
create_default_index_page() {
    log "Creating default web pages..."

    local webroot="/var/www/html"

    # Create index.html
    cat > "${webroot}/index.html" << 'EOF'
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Webserver erfolgreich installiert</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
            line-height: 1.6;
            max-width: 800px;
            margin: 50px auto;
            padding: 20px;
            background: #f5f5f5;
        }
        .container {
            background: white;
            padding: 40px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        h1 {
            color: #333;
            border-bottom: 3px solid #4CAF50;
            padding-bottom: 10px;
        }
        .success {
            color: #4CAF50;
            font-size: 1.2em;
            font-weight: bold;
        }
        .info {
            background: #e3f2fd;
            padding: 15px;
            border-left: 4px solid #2196F3;
            margin: 20px 0;
        }
        code {
            background: #f4f4f4;
            padding: 2px 6px;
            border-radius: 3px;
            font-family: monospace;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Webserver Installation</h1>
        <p class="success">✓ Webserver erfolgreich installiert!</p>

        <div class="info">
            <strong>Nächste Schritte:</strong>
            <ol>
                <li>Ersetzen Sie diese Seite durch Ihre eigene Website</li>
                <li>Konfigurieren Sie Virtual Hosts für Ihre Domains</li>
                <li>Installieren Sie ggf. SSL-Zertifikate mit Certbot</li>
            </ol>
        </div>

        <p>
            Diese Seite befindet sich in: <code>/var/www/html/</code><br>
            Testen Sie PHP: <a href="info.php">info.php</a>
        </p>
    </div>
</body>
</html>
EOF

    # Create info.php for PHP testing
    cat > "${webroot}/info.php" << 'EOF'
<?php
/**
 * PHP Information Page
 * Auto-generated by Webhosting Installer
 */

// Security: Remove this file in production!
if ($_SERVER['REMOTE_ADDR'] !== '127.0.0.1' &&
    $_SERVER['REMOTE_ADDR'] !== '::1') {
    // Only allow from localhost in production
    // Comment out these lines to enable remote access
}

phpinfo();
EOF

    # Set permissions
    chown -R www-data:www-data "${webroot}"
    chmod 755 "${webroot}"
    chmod 644 "${webroot}/index.html"
    chmod 644 "${webroot}/info.php"

    log "Default web pages created in ${webroot}"
}

# ============================================================================
# UTILITY FUNCTIONS
# ============================================================================

# get_webserver_status: Get webserver status
get_webserver_status() {
    if [[ "${WEBSERVER}" == "nginx" ]]; then
        systemctl status nginx --no-pager
    elif [[ "${WEBSERVER}" == "apache" ]]; then
        systemctl status apache2 --no-pager
    fi
}

# reload_webserver: Reload webserver configuration
reload_webserver() {
    if [[ "${WEBSERVER}" == "nginx" ]]; then
        reload_service "nginx"
    elif [[ "${WEBSERVER}" == "apache" ]]; then
        reload_service "apache2"
    fi
}

# ============================================================================
# END OF WEBSERVER INSTALLER
# ============================================================================

log "Webserver installer library loaded successfully"
