#!/bin/bash
#
# PHP Version Switcher
# Copyright: Daniel Hiller
# License: AGPL-3 or later
#
# Switch between installed PHP versions for Nginx
#

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check root
if [[ $EUID -ne 0 ]]; then
   echo -e "${RED}This script must be run as root${NC}"
   exit 1
fi

# Get currently active PHP version from Nginx config
get_current_php() {
    if [[ ! -f /etc/nginx/sites-enabled/default ]]; then
        echo "unknown"
        return
    fi

    local socket_path
    socket_path=$(grep -oP 'unix:/run/php/php\K[0-9.]+' /etc/nginx/sites-enabled/default | head -1)
    echo "${socket_path}"
}

# Get all installed PHP-FPM versions
get_installed_php() {
    local versions=()
    for service in /lib/systemd/system/php*-fpm.service; do
        if [[ -f "$service" ]]; then
            local version=$(basename "$service" | grep -oP 'php\K[0-9.]+')
            if [[ -n "$version" ]]; then
                versions+=("$version")
            fi
        fi
    done
    echo "${versions[@]}"
}

# Switch PHP version
switch_php() {
    local target_version="$1"
    local current_version=$(get_current_php)

    echo -e "${BLUE}Switching from PHP ${current_version} to PHP ${target_version}...${NC}"

    # Check if target version is installed
    if [[ ! -f "/lib/systemd/system/php${target_version}-fpm.service" ]]; then
        echo -e "${RED}Error: PHP ${target_version} is not installed${NC}"
        echo -e "${YELLOW}Install it first:${NC} apt install php${target_version}-fpm"
        exit 1
    fi

    # Update Nginx default site
    local default_site="/etc/nginx/sites-available/default"
    if [[ ! -f "$default_site" ]]; then
        echo -e "${RED}Error: Nginx default site not found${NC}"
        exit 1
    fi

    # Backup current config
    cp "$default_site" "$default_site.backup.$(date +%Y%m%d_%H%M%S)"

    # Replace PHP-FPM socket path
    sed -i "s|unix:/run/php/php[0-9.]*-fpm.sock|unix:/run/php/php${target_version}-fpm.sock|g" "$default_site"

    # Test Nginx config
    echo -e "${BLUE}Testing Nginx configuration...${NC}"
    if ! nginx -t; then
        echo -e "${RED}Nginx configuration test failed! Restoring backup...${NC}"
        mv "$default_site.backup."* "$default_site"
        exit 1
    fi

    # Reload Nginx
    echo -e "${BLUE}Reloading Nginx...${NC}"
    systemctl reload nginx

    # Ensure target PHP-FPM is running
    echo -e "${BLUE}Ensuring PHP ${target_version}-FPM is running...${NC}"
    systemctl enable "php${target_version}-fpm" 2>/dev/null || true
    systemctl start "php${target_version}-fpm" 2>/dev/null || true

    echo -e "${GREEN}✓ Successfully switched to PHP ${target_version}${NC}"
    echo -e "${YELLOW}Note: Old PHP-FPM services are still running. Stop them manually if not needed:${NC}"
    echo -e "  systemctl stop php${current_version}-fpm"
}

# Show current status
show_status() {
    local current=$(get_current_php)
    local installed=$(get_installed_php)

    echo -e "${BLUE}=== PHP Version Status ===${NC}\n"
    echo -e "Current active version: ${GREEN}PHP $current${NC}"
    echo -e "\nInstalled PHP-FPM versions:"

    for version in $installed; do
        local status=$(systemctl is-active "php${version}-fpm" 2>/dev/null || echo "inactive")
        if [[ "$version" == "$current" ]]; then
            echo -e "  ${GREEN}● PHP $version${NC} (active, $status)"
        else
            echo -e "  ${YELLOW}○ PHP $version${NC} ($status)"
        fi
    done

    echo ""
}

# Install new PHP version
install_php() {
    local version="$1"

    echo -e "${BLUE}Installing PHP ${version}...${NC}"

    # Add Sury repository if not present
    if [[ ! -f /etc/apt/sources.list.d/php.list ]]; then
        echo -e "${YELLOW}Adding Sury PHP repository...${NC}"
        apt-get install -y lsb-release apt-transport-https ca-certificates wget
        wget -q -O /tmp/php-sury.gpg https://packages.sury.org/php/apt.gpg
        mv /tmp/php-sury.gpg /etc/apt/trusted.gpg.d/php.gpg
        chmod 644 /etc/apt/trusted.gpg.d/php.gpg
        echo "deb https://packages.sury.org/php/ $(lsb_release -sc) main" > /etc/apt/sources.list.d/php.list
        apt-get update -qq
    fi

    # Install PHP packages
    local packages=(
        "php${version}-fpm"
        "php${version}-cli"
        "php${version}-common"
        "php${version}-mysql"
        "php${version}-curl"
        "php${version}-gd"
        "php${version}-mbstring"
        "php${version}-xml"
        "php${version}-zip"
        "php${version}-intl"
        "php${version}-bcmath"
        "php${version}-opcache"
    )

    DEBIAN_FRONTEND=noninteractive apt-get install -y "${packages[@]}"

    # Enable and start
    systemctl enable "php${version}-fpm"
    systemctl start "php${version}-fpm"

    echo -e "${GREEN}✓ PHP ${version} installed successfully${NC}"
}

# Main menu
main() {
    case "${1:-}" in
        status|"")
            show_status
            ;;
        switch)
            if [[ -z "${2:-}" ]]; then
                echo -e "${RED}Error: No version specified${NC}"
                echo "Usage: $0 switch <version>"
                echo "Example: $0 switch 8.3"
                exit 1
            fi
            switch_php "$2"
            ;;
        install)
            if [[ -z "${2:-}" ]]; then
                echo -e "${RED}Error: No version specified${NC}"
                echo "Usage: $0 install <version>"
                echo "Example: $0 install 8.4"
                exit 1
            fi
            install_php "$2"
            ;;
        *)
            echo "PHP Version Switcher"
            echo ""
            echo "Usage:"
            echo "  $0 status           Show current PHP version and installed versions"
            echo "  $0 switch <version> Switch to a different PHP version"
            echo "  $0 install <version> Install a new PHP version"
            echo ""
            echo "Examples:"
            echo "  $0 status"
            echo "  $0 switch 8.3"
            echo "  $0 install 8.4"
            echo "  $0 switch 7.4"
            ;;
    esac
}

main "$@"
